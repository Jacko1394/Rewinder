[
  {
    "operation": 2,
    "text": "// Bridge.cs\n// MAGIQ Documents\n// Created by Jack Della on 1/03/2019\n// Copyright Â© 2019 MAGIQ Software Ltd. All rights reserved.\n\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\n\nusing Xamarin.Forms;\nusing Xamarin.Essentials;\nusing Microsoft.Extensions.Logging;\nusing Plugin.FilePicker;\n\nusing Magiq.Mobile.Main.Views;\nusing Magiq.Mobile.Main.Models;\nusing Magiq.Mobile.Common;\nusing Magiq.Mobile.Database;\nusing Magiq.Mobile.Main.Interfaces;\nusing Magiq.Mobile.Extensions;\nusing Magiq.Mobile.Main.ViewModels;\nusing Magiq.Mobile.InfoRouter;\nusing Magiq.Mobile.Models;\nusing Magiq.Mobile.Main.Models.Resource;\nusing Magiq.Mobile.FileInfoWrapper;\nusing Magiq.Mobile.Interfaces;\n\nnamespace Magiq.Mobile.Main.Services {\n\n\tpublic class Bridge {\n\n\t\tpublic const string Wait = \"WAIT\"; // indefinite wait\n\n\t\tinternal WebViewModel? WebVm { get; set; }\n\t\tinternal string MenuItem { get; set; } = string.Empty;\n\n\t\tpublic void Init(Action action) => SetBusy = action; // inject this\n\n\t\tprivate Action? SetBusy; // kill pls\n\n\t\tprivate readonly ILogger _logger;\n\t\tprivate readonly IAppFacade _app;\n\t\tprivate readonly ICredentialService _credentialService;\n\t\tprivate readonly IPageFactory _pageFactory;\n\t\tprivate readonly PhotoPicker _photo;\n\t\tprivate readonly Settings _settings;\n\n\t\tprivate static readonly Dictionary<string, MethodInfo> BridgeMethods;\n\n\t\tpublic static readonly string[] MethodsToExclude = {\n\t\t\t\"finalize\",\n\t\t\t\"get_WebVm\",\n\t\t\t\"set_WebVm\",\n\t\t\t\"memberwiseClone\",\n\t\t\t\"set_MenuItem\",\n\t\t\t\"<ShowTaskPage>b__30_0\",\n\t\t\t\"equals\",\n\t\t\t\"getHashCode\",\n\t\t\t\"getType\",\n\t\t\t\"init\",\n\t\t\t\"theNativeFunction\",\n\t\t\t\"toString\"\n\t\t};\n\n\t\tstatic Bridge() {\n\t\t\tBridgeMethods = typeof(Bridge)\n\t\t\t\t.GetMethods(BindingFlags.Public | BindingFlags.Instance)\n\t\t\t\t.Where(x => !MethodsToExclude.Contains(x.Name, StringComparer.OrdinalIgnoreCase))\n\t\t\t\t.ToDictionary(x => x.Name);\n\t\t}\n\n\t\tpublic Bridge(\n\t\t\tILogger<WebViewModel> logger,\n\t\t\tPhotoPicker photo,\n\t\t\tSettings settings,\n\t\t\tIPageFactory pageFactory,\n\t\t\tICredentialService credentialService,\n\t\t\tIAppFacade appFacade\n\t\t) {\n\t\t\t_logger = logger;\n\t\t\t_photo = photo;\n\t\t\t_settings = settings;\n\t\t\t_pageFactory = pageFactory;\n\t\t\t_credentialService = credentialService;\n\t\t\t_app = appFacade;\n\t\t}\n\n\t\tpublic async Task<string> TheNativeFunction(string json) {\n\n\t\t\ttry {\n\n\t\t\t\tvar request = SenchaRequest.ReadCommand(json);\n\n\t\t\t\tif (request is null) {\n\t\t\t\t\treturn Result.Fail(Error.NullParams).ToString();\n\t\t\t\t}\n\n\t\t\t\tvar methodExists = BridgeMethods.TryGetValue(request.Command, out var method);\n\n\t\t\t\tif (!methodExists) {\n\t\t\t\t\t_logger.LogWarning(\"BRIDGE METHOD DOESN'T EXIST\");\n\t\t\t\t\treturn Result.Fail(Error.CantDoIt).ToString();\n\t\t\t\t}\n\n\t\t\t\tvar paramsArray = method.GetParameters();\n\n\t\t\t\tif (paramsArray.Length != request.Params.Length) {\n\n\t\t\t\t\tif (request.Params.Length < paramsArray.Length) {\n\n\t\t\t\t\t\tvar requestParams = request.Params.ToList();\n\n\t\t\t\t\t\tfor (var i = 0; i < paramsArray.Length - request.Params.Length; ++i) {\n\t\t\t\t\t\t\trequestParams.Add(string.Empty); // add empty strings\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trequest.Params = requestParams.ToArray();\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar error = \"Bridge ERROR: Too many parameters. The Native.js file might need to be regenerated.\";\n\t\t\t\t\t\t_logger.LogWarning(error);\n\t\t\t\t\t\t_logger.LogWarning(request.ToJson());\n\t\t\t\t\t\treturn Result.Fail(error).ToString();\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tvar args = paramsArray.Length < 1 ? new string[0] : request.Params;\n\n\t\t\t\t_logger.LogInformation($\"Bridge: {method.Name} : {args.ToJson()}\");\n\n\t\t\t\tvar methodTask = method.Invoke(this, args);\n\n\t\t\t\tif (methodTask is Result plainResult) {\n\t\t\t\t\treturn plainResult.ToString();\n\t\t\t\t}\n\n\t\t\t\tif (methodTask is Task<Result> asyncPlainResult) {\n\t\t\t\t\tvar returnJson = await asyncPlainResult;\n\t\t\t\t\treturn returnJson.ToString();\n\t\t\t\t}\n\n\t\t\t\t// <object> enables me to pass any structure straight in, json.net will serialize it and pass thru bridge\n\t\t\t\tif (methodTask is Result<object> result) {\n\t\t\t\t\treturn result.ToString();\n\t\t\t\t}\n\n\t\t\t\tif (methodTask is Task<Result<object>> asyncResult) {\n\t\t\t\t\tvar returnJson = await asyncResult;\n\t\t\t\t\treturn returnJson.ToString();\n\t\t\t\t}\n\n\t\t\t\tif (methodTask is string stringResult) {\n\n\t\t\t\t\tif (stringResult == Wait) {\n\t\t\t\t\t\treturn Wait;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Result<string>.Succeed(stringResult).ToString();\n\t\t\t\t}\n\n\t\t\t\tif (methodTask is Task<string> asyncStringResult) {\n\n\t\t\t\t\tvar returnJson = await asyncStringResult;\n\n\t\t\t\t\tif (returnJson == Wait) {\n\t\t\t\t\t\treturn Wait;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Result<string>.Succeed(returnJson).ToString();\n\t\t\t\t}\n\n\t\t\t\t// SHOULD NEVER REACH HERE...\n\t\t\t\t// All Bridge methods should only return Result or Result<object>\n\t\t\t\treturn Result<object>.Fail(\"Error occurred on Native side, C# method was not in correct format.\", methodTask).ToString();\n\t\t\t} catch (TargetInvocationException tex) {\n\t\t\t\tif (tex?.InnerException is { } inner) {\n\t\t\t\t\tif (inner is SenchaException sex) {\n\t\t\t\t\t\tsex.Error(); // report\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_logger.LogError(\"Bridge Reflection INNER ERROR\", inner);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t_logger.LogError(\"Bridge Reflection ERROR\", tex);\n\t\t\t\t}\n\t\t\t\treturn Result.Succeed.ToString();\n\t\t\t} catch (InvalidOperationException mex) {\n\t\t\t\treturn Result.Fail(mex.Message).ToString();\n\t\t\t} catch (Exception ex) {\n\t\t\t\treturn Result.Fail(ex.Error()).ToString();\n\t\t\t}\n\n\t\t}\n\n\t\t#region BridgeFuncs\n\n\t\tpublic Result<object> RunSql(string sqlStatement) {\n\t\t\treturn Result<object>.Succeed(App.GetService<Sql>().Query(sqlStatement));\n\t\t}\n\n\t\tpublic async Task<Result<object>> OpenFilePicker() {\n\n\t\t\tvar file = await CrossFilePicker.Current.PickFile();\n\n\t\t\tif (file is null) { // cancelled\n\t\t\t\treturn Result<object>.Fail(\"Cancelled by User\");\n\t\t\t}\n\n\t\t\treturn Result<object>.Succeed(new LocalFile(file.FilePath));\n\t\t}\n\n\t\t// Menu:\n\t\tpublic Result HideMenu() {\n\t\t\tDevice.BeginInvokeOnMainThread(() => {\n\t\t\t\tif (App.Main is MasterDetailPage main) {\n\t\t\t\t\tmain.IsPresented = false;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\tpublic Result"
  },
  {
    "operation": 1,
    "text": "<object> GetEnvironment() {\n\t\t\tif (_settings.SelectedConfiguration is null) {\n\t\t\t\treturn Result<object>.Fail(\"No MAGIQ environment has been configured yet!\");\n\t\t\t}\n\t\t\treturn Result<object>.Succeed(_settings.SelectedConfiguration);\n\t\t}\n\n\t\tpublic Result"
  },
  {
    "operation": 2,
    "text": " ShowMenu() {\n\t\t\tDevice.BeginInvokeOnMainThread(() => {\n\t\t\t\tif (App.Main is MasterDetailPage main) {\n\t\t\t\t\tmain.IsPresented = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t// Xamarin:\n\t\tpublic async Task<Result> DisplayMessage(string title, string message, string button) {\n\t\t\tawait App.Msg(title, message, button);\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[Summary(\"Destruction = "
  },
  {
    "operation": 1,
    "text": "G"
  },
  {
    "operation": 2,
    "text": "RE"
  },
  {
    "operation": 0,
    "text": "D"
  },
  {
    "operation": 1,
    "text": "EN"
  },
  {
    "operation": 2,
    "text": ", for important/dangerous operations, leave null if n/a.  Up to 5 choices, leave empty for none.\")]\n\t\tpublic async Task<string> DisplayActionsheet(string title, string cancel, string destruction, string btn1, string btn2, string btn3, string btn4, string btn5) {\n\t\t\tvar args = new List<string> { btn1, btn2, btn3, btn4, btn5 }.Where(x => !string.IsNullOrWhiteSpace(x)).ToArray();\n\t\t\treturn await Application.Current.MainPage.DisplayActionSheet(title, cancel, destruction, args);\n\t\t}\n\n\t\t// Files:\n\t\tpublic async Task<Result<object>> SaveFile(string key, string value) {\n\t\t\tvar save = new XFile(Under.Documents, MenuItem, key);\n\t\t\tawait save.Save(value);\n\t\t\treturn Result<object>.Succeed(save.Path);\n\t\t}\n\n\t\tpublic async Task<string> LoadFile(string key) {\n\t\t\tvar str = await new XFile(Under.Documents, MenuItem, key).Load<string>();\n\t\t\tstr ??= \"null\";\n\t\t\treturn str;\n\t\t}\n\n\t\tpublic Result<object> LoadFileList() {\n\t\t\tvar list = new XFolder(Under.Documents).Children;\n\t\t\treturn Result<object>.Succeed(list);\n\t\t}\n\n\t\tpublic Result DeleteFile(string key) {\n\t\t\tnew XFile(Under.Documents, MenuItem, key).Delete();\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t// Pages:\n\t\t[DocumentsMethod]\n\t\tpublic Result ShowOfflineDocs() {\n\t\t\tDevice.BeginInvokeOnMainThread(() => _app.GetNavigation.PushAsync(App.GetService<OfflineDocsPage>()));\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic Result ShowUploadPage(string directory) {\n\t\t\ttry {\n\n\t\t\t\tif (Path.HasExtension(directory)) {\n\t\t\t\t\tdirectory = Path.GetDirectoryName(directory); // if its a file, chop it off\n\t\t\t\t}\n\n\t\t\t\tDevice.BeginInvokeOnMainThread(() => _app.GetNavigation.PushAsync(new UploadPage(directory)));\n\t\t\t} catch (Exception ex) {\n\t\t\t\tex.Error();\n\t\t\t}\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic Result ShowTaskPage() {\n\t\t\tDevice.BeginInvokeOnMainThread(() => _app.GetNavigation.PushAsync(_pageFactory.GetTaskPage(WebVm)));\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t// Media:\n\t\t[Summary(\"Will take a device screenshot, and return the photo data as a base64string.\")]\n\t\tpublic async Task<Result<object>> GetScreenshot() {\n\t\t\tvar pic = await _photo.GetScreenshot();\n\t\t\treturn Result<object>.Succeed(pic.ToBase64String());\n\t\t}\n\n\t\t[Summary(\"Returns the photo data as a base64string.\")]\n\t\tpublic async Task<Result<object>> GetPhoto(string choice) {\n\n\t\t\tvar option = Choice.None;\n\n\t\t\tif (choice == \"take\") {\n\t\t\t\toption = Choice.Take;\n\t\t\t} else if (choice == \"pick\") {\n\t\t\t\toption = Choice.Pick;\n\t\t\t}\n\n\t\t\tvar file = await _photo.GetPhoto(option);\n\t\t\tif (file is { }) {\n\t\t\t\tvar pic = await file.Load<Stream>();\n\n\t\t\t\tif (pic is { }) {\n\t\t\t\t\tvar data = pic.ToBase64String();\n\n\t\t\t\t\tif (data.Length > 50_000_000) {\n\t\t\t\t\t\treturn Result<object>.Fail(\"The selected photo was too large to pass thru the bridge.\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Result<object>.Succeed(data);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Result<object>.Fail(\"Operation was cancelled by user.\");\n\t\t}\n\n\t\t[Summary(\"Returns the video data as a base64string.\")]\n\t\tpublic async Task<Result<object>> GetVideo(string choice) {\n\n\t\t\tvar option = Choice.None;\n\n\t\t\tif (choice == \"take\") {\n\t\t\t\toption = Choice.Take;\n\t\t\t} else if (choice == \"pick\") {\n\t\t\t\toption = Choice.Pick;\n\t\t\t}\n\n\t\t\tvar file = await _photo.GetVideo(option);\n\t\t\tif (file is { }) {\n\n\t\t\t\tvar pic = await file.Load<Stream>();\n\n\t\t\t\tif (pic is { }) {\n\t\t\t\t\tvar data = pic.ToBase64String();\n\n\t\t\t\t\tif (data.Length > 50_000_000) {\n\t\t\t\t\t\treturn Result<object>.Fail(\"The selected video was too large to pass thru the bridge.\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Result<object>.Succeed(data);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Result<object>.Fail(\"Operation was cancelled by user.\");\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result<object>> ShareDocument(string filename, string id) {\n\t\t\tSetBusy?.Invoke();\n\t\t\treturn await Helper.DownloadAndSave(filename, $\"~{id}\", Then.Share);\n\t\t}\n\n\t\t// PUBLIC for TaskVm\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result<object>> ViewDocument(string filename, string id) {\n\t\t\tSetBusy?.Invoke();\n\t\t\treturn await Helper.DownloadAndSave(filename, $\"~{id}\", Then.View);\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result<object>> SaveOffline(string filename, string id) {\n\t\t\tSetBusy?.Invoke();\n\t\t\treturn await Helper.DownloadAndSave(filename, $\"~{id}\", Then.SaveOffline);\n\t\t}\n\n\t\tpublic async Task<Result> ViewUrl(string url, string title) { // title = string.IsNullOrWhiteSpace(title) ? MenuItem : title;\n\t\t\ttitle = string.IsNullOrWhiteSpace(title) ? MenuItem : title;\n\t\t\treturn await Viewer.Open(WebResource.Website(title, url));\n\t\t}\n\n\t\tpublic async Task<Result> ViewOfflineDocument(string filename) {\n\t\t\tvar doc = new LocalFile(Under.Documents, filename);\n\t\t\tawait Viewer.Open(doc);\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[Summary(\"Valid choices: 'take' OR 'pick' only.\")]\n\t\t[Summary(\"Must specify a filename with '.jpg' extension.\")]\n\t\tpublic async Task<Result> CreateOfflinePhoto(string filename, string choice) {\n\n\t\t\tvar option = Choice.None;\n\n\t\t\tif (choice == \"take\") {\n\t\t\t\toption = Choice.Take;\n\t\t\t} else if (choice == \"pick\") {\n\t\t\t\toption = Choice.Pick;\n\t\t\t}\n\n\t\t\tvar file = await _photo.GetPhoto(option);\n\n\t\t\tif (file is { }) {\n\t\t\t\tvar save = new XFile(Under.Documents, filename);\n\t\t\t\tfile.Move(save);\n\t\t\t\treturn Result.Succeed;\n\t\t\t}\n\n\t\t\treturn Result.Fail(\"Operation was cancelled by user.\");\n\t\t}\n\n\t\t[Summary(\""
  },
  {
    "operation": 0,
    "text": "Valid choices: 'take' OR 'pick' only.\")]\n\t\t[Summary(\""
  },
  {
    "operation": 2,
    "text": "Must specify a filename with '.mp4' extension"
  },
  {
    "operation": 1,
    "text": ".\")]\n\t\t[Summary(\"Valid choices: 'take' OR 'pick' only"
  },
  {
    "operation": 2,
    "text": ".\")]\n\t\tpublic async Task<Result> CreateOfflineVideo(string filename, string choice) {\n\n\t\t\tvar option = Choice.None;\n\n\t\t\tif (choice == \"take\") {\n\t\t\t\toption = Choice.Take;\n\t\t\t} else if (choice == \"pick\") {\n\t\t\t\toption = Choice.Pick;\n\t\t\t}\n\n\t\t\tvar file = await _photo.GetVideo(option);\n\n\t\t\tif (file is { }) {\n\t\t\t\tvar save = new XFile(Under.Documents, filename);\n\t\t\t\tfile.Move(save);\n\t\t\t\treturn Result.Succeed;\n\t\t\t}\n\n\t\t\treturn Result.Fail(\"Operation was cancelled by user.\");\n\t\t}\n\n\t\t// Messaging:\n\t\tpublic async Task<Result> CreateEmail(string to, string subject, string messageBody) {\n\t\t\tvar serv = App.GetService<IEmailService>();\n\n\t\t\tawait await App.MainThreadAsync(() => serv.CreateEmail(to, subject, messageBody));\n\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\tpublic async Task<Result> CreateEmailWithAttatchment(string to, string subject, string messageBody, string filename) {\n\t\t\tvar serv = App.GetService<IEmailService>();\n\t\t\tawait await App.MainThreadAsync(() => serv.CreateEmail(to, subject, messageBody, new XFile(Under.Documents, MenuItem, filename)));\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\tpublic async Task<Result> CreateSms(string to, string messageBody) {\n\t\t\tvar serv = App.GetService<IEmailService>();\n\t\t\tawait await App.MainThreadAsync(() => serv.CreateSms(to, messageBody));\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t// InfoRouter:\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result> AddFav(string id) {\n\t\t\tSetBusy?.Invoke();\n\t\t\tawait App.GetService<IInfoRouterClient>().AddToFavorites($\"~{id}\");\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result> RemoveFav(string id) {\n\t\t\tSetBusy?.Invoke();\n\t\t\tawait App.GetService<IInfoRouterClient>().RemoveFromFavorites($\"~{id}\");\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic Result<object> GetInfoRouterUser() {\n\t\t\tvar ir = App.GetService<IInfoRouterClient>();\n\t\t\tif (!ir.IsAuthenticated) {\n\t\t\t\treturn Result<object>.Fail(\"Could not authenticate with the MAGIQ Documents server.\", ir.User);\n\t\t\t}\n\t\t\treturn Result<object>.Succeed(ir.User);\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic async Task<Result<object>> GetInfoRouterTasks() {\n\t\t\tif (!App.GetService<IInfoRouterClient>().IsAuthenticated) {\n\t\t\t\treturn Result<object>.Fail(\"Could not authenticate with the MAGIQ Documents server.\", App.GetService<IInfoRouterClient>().User);\n\t\t\t}\n\n\t\t\tvar result = await App.GetService<IInfoRouterClient>().GetTasks(\"<CRITERIA><ITEM NAME=\\\"TASKCOMPLETIONSTATUS\\\" VALUE=\\\"0\\\" /></CRITERIA>\", \"3\", true);\n\n\t\t\tif (!result.Success) {\n\t\t\t\treturn Result<object>.Fail(result.Error ?? \"Couldn't get Tasks.\");\n\t\t\t}\n\n\t\t\treturn Result<object>.Succeed(result.Tasks);\n\t\t}\n\n\t\t// Device:\n\t\tpublic async Task<Result<object>> GetLocation() {\n\t\t\ttry {\n\t\t\t\t//todo TEST\n\t\t\t\tvar location = await await App.MainThreadAsync(Geolocation.GetLocationAsync);\n\t\t\t\treturn Result<object>.Succeed(location);\n\t\t\t} catch (Exception ex) {\n\t\t\t\treturn Result<object>.Fail(ex.Error());\n\t\t\t}\n\t\t}\n\n\t\t[Summary(\"https://docs.microsoft.com/en-us/dotnet/api/xamarin.essentials.navigationmode\")]\n\t\tpublic async Task<Result> PushMapLocation(string lat, string lon, string name, string navigationMode) {\n\t\t\ttry {\n\n\t\t\t\tvar mode = NavigationMode.None;\n\n\t\t\t\tif (!string.IsNullOrWhiteSpace(navigationMode)) {\n\t\t\t\t\tif (!Enum.TryParse(navigationMode, out mode)) {\n\t\t\t\t\t\treturn Result.Fail(\"Invalid NavigationMode was specified.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar options = new MapLaunchOptions {\n\t\t\t\t\tName = name,\n\t\t\t\t\tNavigationMode = mode\n\t\t\t\t};\n\t\t\t\tawait Map.OpenAsync(Convert.ToDouble(lat), Convert.ToDouble(lon), options);\n\t\t\t\treturn Result.Succeed;\n\t\t\t} catch {\n\t\t\t\treturn Result.Fail(Error.BadAddress);\n\t\t\t}\n\t\t}\n\n\t\t[Summary(\"Pass NavMode as string => 'None', 'Driving' etc...\")]\n\t\tpublic async Task<Result> PushMapAddress(string address, string navigationMode) {\n\t\t\ttry {\n\n\t\t\t\tvar mode = NavigationMode.None;\n\n\t\t\t\tif (!string.IsNullOrWhiteSpace(navigationMode)) {\n\t\t\t\t\tif (!Enum.TryParse(navigationMode, out mode)) {\n\t\t\t\t\t\treturn Result.Fail(\"Invalid NavigationMode was specified.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar location = await Geocoding.GetLocationsAsync(address);\n\t\t\t\tvar options = new MapLaunchOptions {\n\t\t\t\t\tName = address,\n\t\t\t\t\tNavigationMode = mode\n\t\t\t\t};\n\t\t\t\tawait Map.OpenAsync(location.FirstOrDefault(), options);\n\t\t\t\treturn Result.Succeed;\n\t\t\t} catch {\n\t\t\t\treturn Result.Fail(Error.BadAddress);\n\t\t\t}\n\t\t}\n\n\t\tpublic Result PlaceCall(string number) {\n\t\t\tDevice.BeginInvokeOnMainThread(() => {\n\t\t\t\ttry {\n\t\t\t\t\tPhoneDialer.Open(number);\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tex.Error();\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\tpublic async Task<Result<object>> GetClipboard() {\n\t\t\tif (Clipboard.HasText) {\n\t\t\t\tvar text = await Clipboard.GetTextAsync();\n\t\t\t\treturn Result<object>.Succeed(text);\n\t\t\t}\n\t\t\treturn Result<object>.Fail(\"Nothing in the Clipboard\");\n\t\t}\n\n\t\tpublic async Task<Result> SetClipboard(string text) {\n\t\t\ttry {\n\t\t\t\tawait Clipboard.SetTextAsync(text);\n\t\t\t\treturn Result.Succeed;\n\t\t\t} catch (Exception ex) {\n\t\t\t\treturn Result.Fail(ex.Error());\n\t\t\t}\n\t\t}\n\n\t\t// MAGIQ:\n\t\t[DocumentsMethod]\n\t\t[Summary(\"Properties: 'ticket', 'libPrefs'\")]\n\t\tpublic Result<object> GetDocumentsInit() {\n\n\t\t\tvar ir = App.GetService<IInfoRouterClient>();\n\n\t\t\tif (!ir.IsAuthenticated) {\n\t\t\t\treturn Result<object>.Fail(\"Could not authenticate with the MAGIQ Documents server.\", ir.User);\n\t\t\t}\n\n\t\t\tvar final = new {\n\t\t\t\tir.User.Ticket,\n\t\t\t\tlibPrefs = GetSetting(\"libPrefs\").Data\n\t\t\t};\n\n\t\t\treturn Result<object>.Succeed(final);\n\t\t}\n\n\t\tpublic Result<object> GetUserEmail() {\n\t\t\treturn Result<object>.Succeed(_credentialService.User.Email);\n\t\t}\n\n\t\tpublic Result<object> GetEnvironment() {\n\t\t\tif (_settings.SelectedConfiguration is null) {\n\t\t\t\treturn Result<object>.Fail(\"No MAGIQ environment has been configured yet!\");\n\t\t\t}\n\t\t\treturn Result<object>.Succeed(_settings.SelectedConfiguration);\n\t\t}\n\n\t\t// Notifications: //TODO: work on Notification service...\n\t\tpublic Result<object> CreateNotification(string title, string message, string date) {\n\t\t\tvar data = App.GetService<INotifier>().CreateNotififation(title, message, date);\n\t\t\treturn Result<object>.Succeed(data);\n\t\t}\n\n\t\tpublic Result<object> CreateAlarm(string title, string date) {\n\t\t\tvar data = App.GetService<INotifier>().CreateAlarm(title, date);\n\t\t\treturn Result<object>.Succeed(data);\n\t\t}\n\n\t\tpublic Result<object> GetNotificationList() {\n\t\t\treturn Result<object>.Succeed(App.GetService<INotifier>().GetNotificationList());\n\t\t}\n\n\t\t[DocumentsMethod]\n\t\tpublic string LookIn() {\n\t\t\tDevice.BeginInvokeOnMainThread(() => {\n\t\t\t\t_app.GetNavigation.PushModalAsync(_pageFactory.GetPage<LibraryPage>().InNavPage(new NavConfig(Icons.fa_close, \"Cancel\")));\n\t\t\t});\n\t\t\treturn Result.Succeed.ToString();\n\t\t}\n\n\t\tpublic Result SetSetting(string key, string value) {\n\t\t\tPreferences.Set(MenuItem + key, value);\n\t\t\treturn Result.Succeed;\n\t\t}\n\n\t\tpublic Result<object> GetSetting(string key) {\n\t\t\tvar result = Preferences.Get(MenuItem + key, null);\n\t\t\treturn result == null ? Result<object>.Fail(\"key not present in pref store\") : Result<object>.Succeed(result);\n\t\t}\n\n\n\t\t//Testing"
  },
  {
    "operation": 1,
    "text": " YOLO"
  },
  {
    "operation": 2,
    "text": ":\n\t\t[Summary(\"Adds a string to the native error log. Collects silently, and sends to AppCenter to diagnose.\")]\n\t\tpublic Result ReportError(string error, string error2, string error3) {\n\t\t\terror = $\"{MenuItem} Error:\\n{error}\";\n\t\t\terror += error2 + error3;\n\t\t\tthrow new SenchaException(error);\n\t\t}\n\n\n\t\t// Helper:\n\t\tprivate enum Then : byte { Share, SaveOffline, View }\n\n\t\t// private class so not picked up in BridgeGeneration:\n\t\tprivate static class Helper {\n\n\t\t\tpublic static async Task<Result<object>> DownloadAndSave(string name, string id, Then doThis) {\n\n\t\t\t\tstring? text;\n\t\t\t\tvar result = await App.GetService<IInfoRouterClient>().DownloadDocument(id);\n\n\t\t\t\tif (result.Success) {\n\t\t\t\t\ttext = result.Base64Binary ?? string.Empty;\n\t\t\t\t} else {\n\t\t\t\t\ttext = result.Error ?? \"The download contains no data. Your MAGIQ Documents session may need to be refreshed.\";\n\t\t\t\t\tawait App.Msg(\"Download Error\", text, \"OK\");\n\t\t\t\t\treturn Result<object>.Fail(text);\n\t\t\t\t}\n\n\t\t\t\tif (string.IsNullOrWhiteSpace(text)) {\n\t\t\t\t\ttext = \"The download process succeeded, but there was a problem reading the file data.\";\n\t\t\t\t\tawait App.Msg(\"Download Error\", text, \"OK\");\n\t\t\t\t\treturn Result<object>.Fail(text);\n\t\t\t\t}\n\n\t\t\t\tvar type = doThis == Then.SaveOffline ? Under.Documents : Under.Temp;\n\t\t\t\tvar doc = new LocalFile(type, name);\n\n\t\t\t\tdoc.Out();\n\n\t\t\t\tvar t1 = text.AsStream();\n\t\t\t\tvar save = await doc.Save(t1);\n\n\t\t\t\tif (string.IsNullOrWhiteSpace(save)) {\n\t\t\t\t\treturn Result<object>.Fail(doc.Name, doc);\n\t\t\t\t}\n\n\t\t\t\tvar action = doThis switch {\n\t\t\t\t\tThen.Share => doc.Share(),\n\t\t\t\t\tThen.View => await Viewer.Open(doc),\n\t\t\t\t\t_ => Result.Succeed\n\t\t\t\t};\n\n\t\t\t\tif (!action.Success) {\n\t\t\t\t\treturn Result<object>.Fail(action.Error, doc);\n\t\t\t\t}\n\n\t\t\t\treturn Result<object>.Succeed(doc);\n\t\t\t}\n\t\t}\n\n\t\t[AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = false)]\n\t\tpublic class DocumentsMethod : Attribute {\n"
  },
  {
    "operation": 0,
    "text": "\n\t\t}\n\t\t[AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)]\n\t\tpublic class Summary : Attribute {\n\t\t\tpublic string Comment { get; set; }\n\t\t\tpublic Summary(string comment) {\n\t\t\t\tComment = comment;\n\t\t\t}"
  },
  {
    "operation": 2,
    "text": "\n\t\t}\n\n\t\t#endregion\n\n\t}\n}\n"
  }
]